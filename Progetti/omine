/******************************************************************************
        _____         ______  _______    ____  _____   ______        ______
   ____|\    \       |      \/       \  |    ||\    \ |\     \   ___|\     \
  /     /\    \     /          /\     \ |    | \\    \| \     \ |     \     \
 /     /  \    \   /     /\   / /\     ||    |  \|    \  \     ||     ,_____/|
|     |    |    | /     /\ \_/ / /    /||    |   |     \  |    ||     \--'\_|/
|     |    |    ||     |  \|_|/ /    / ||    |   |      \ |    ||     /___/|
|\     \  /    /||     |       |    |  ||    |   |    |\ \|    ||     \____|\
| \_____\/____/ ||\____\       |____|  /|____|   |____||\_____/||____ '     /|
 \ |    ||    | /| |    |      |    | / |    |   |    |/ \|   |||    /_____/ |
  \|____||____|/  \|____|      |____|/  |____|   |____|   |___|/|____|     | /
     \(    )/        \(          )/       \(       \(       )/    \( |_____|/
      '    '          '          '         '        '       '      '    )/


              +------------ One Month Is Not Enough -----------+
              |                                                |
              |  Un robot fatto da:                            |
              |  Alessandro Bartolozzi                         |
              |  Andrea Foglia                                 |
              |  Filippo Lari                                  |
              |  Leonardo Venuta                               |
              |  Luca Franceschi                               |
              |  Marco Costa                                   |
              |  Michele Papucci                               |
              |  Stefano Valente                               |
              |                                                |
              |  Creato con l'ausilio di:                      |
              |  Lego NXT                                      |
              |  Bricx Command Center                          |
              |  Coca-Cola                                     |
              |  Barrette Cioccolato Milka                     |
              |                                                |
              |  Ringraziamenti speciali:                      |
              |  Fumetteria Zio Istvan                         |
              +------------------------------------------------+

******************************************************************************/


#define UP    1
#define RIGHT 2
#define DOWN  3
#define LEFT  4

#define S_COMP S4
#define S_LGH1 S1
#define S_LGH2 S2

byte dx = -1;

int realUp;
int lightS1;
int lightS2;
int greyS1;
int greyS2;
int maxS1 = -1;
int maxS2 = -1;


//############################################################################//


int normDeg(int val) {
     if(val > 359)
           val -= 360;
     else if(val < 0)
            val += 360;
     return val;
}

int sensorCompass() {
     return normDeg(SensorHTCompass(S_COMP) - realUp);
}

byte currentDir(int dir) {
    if((dir >= 340 || dir <= 20))
            return UP;

    else if((dir > 20 && dir < 135))
            return RIGHT;

    else if((dir >= 135 && dir <= 225))
            return DOWN;

    else    return LEFT;
}


//############################################################################//


task lineGapDx();

task lineFollowerDx() {
    unsigned short timer = 0;
    unsigned short timerStart = CurrentTick() - FirstTick();

    realUp = SensorHTCompass(S_COMP);

    while(1) {
        lightS1 = Sensor(S_LGH1);
        lightS2 = Sensor(S_LGH2);

        if(lightS1 < greyS1 && lightS2 < greyS2) {
            //Entrambi su nero
            while(lightS1 < greyS1 && lightS2 < greyS2) {
                 lightS1 = Sensor(S_LGH1);
                 lightS2 = Sensor(S_LGH2);
                 OnFwd(OUT_A, 80);
                 OnRev(OUT_C, 80);
            }
            Off(OUT_AC);
        }

        else if(lightS1 < greyS1) {
            //Principale su nero
            realUp = SensorHTCompass(S_COMP);
            timer = 0;
            timerStart = CurrentTick() - FirstTick();
            realUp = SensorHTCompass(S_COMP);
            while(lightS1 < greyS1) {
                 lightS1 = Sensor(S_LGH1);
                 lightS2 = Sensor(S_LGH2);
                      while(lightS2 < greyS2) {
                           lightS2 = Sensor(S_LGH2);
                           OnFwd(OUT_C, 80);
                           OnRev(OUT_A, 80);
                      }
                 OnFwd(OUT_C, 50);
                 OnRev(OUT_A, 20);
            }
            Off(OUT_AC);
        }

        else {
            //Principale su bianco
            while(lightS1 >= greyS1) {
                 lightS1 = Sensor(S_LGH1);
                 timer = CurrentTick() - FirstTick() - timerStart;
                 if(timer > 900) {
                       Off(OUT_AC);
                       ExitTo(lineGapDx);
                 }
                 OnFwd(OUT_A, 50);
                 OnRev(OUT_C, 20);
            }
            Off(OUT_AC);
        }
    }
}

task lineGapDx() {

     while(currentDir(sensorCompass()) != UP) {
          OnFwd(OUT_C, 40);
          OnRev(OUT_A, 40);
     }
     Off(OUT_AC);

     OnFwd(OUT_AC, 40);
     Wait(1200);
     Off(OUT_AC);

     RotateMotor(OUT_C, 50, 120);
     Off(OUT_C);

     while (1) {
         OnFwd(OUT_AC, 40);
         lightS1 = Sensor(S_LGH1);
         lightS2 = Sensor(S_LGH2);
         if (lightS1 < greyS1)
           break;
         if (lightS2 < greyS2)
           break;

         
     }
     
     Off(OUT_AC);
     ExitTo(lineFollowerDx);
     
}


//############################################################################//


task lineGapSx();

task lineFollowerSx() {
    unsigned short timer = 0;
    unsigned short timerStart = CurrentTick() - FirstTick();

    realUp = SensorHTCompass(S_COMP);

    while(1) {
        lightS1 = Sensor(S_LGH1);
        lightS2 = Sensor(S_LGH2);

        if(lightS1 < greyS1 && lightS2 < greyS2) {
            //Entrambi su nero
            while(lightS1 < greyS1 && lightS2 < greyS2) {
                 lightS1 = Sensor(S_LGH1);
                 lightS2 = Sensor(S_LGH2);
                 OnFwd(OUT_C, 80);
                 OnRev(OUT_A, 80);
            }
            Off(OUT_AC);
        }

        else if(lightS2 < greyS2) {
            //Principale su nero
            realUp = SensorHTCompass(S_COMP);
            timer = 0;
            timerStart = CurrentTick() - FirstTick();
            realUp = SensorHTCompass(S_COMP);
            while(lightS2 < greyS2) {
                 lightS1 = Sensor(S_LGH1);
                 lightS2 = Sensor(S_LGH2);
                      while(lightS1 < greyS1) {
                           lightS1 = Sensor(S_LGH1);
                           OnFwd(OUT_A, 80);
                           OnRev(OUT_C, 80);
                      }
                 OnFwd(OUT_A, 50);
                 OnRev(OUT_C, 20);
            }
            Off(OUT_AC);
        }

        else {
            //Principale su bianco
            while(lightS2 >= greyS2) {
                 lightS2 = Sensor(S_LGH2);
                 timer = CurrentTick() - FirstTick() - timerStart;
                 if(timer > 900) {
                       Off(OUT_AC);
                       ExitTo(lineGapSx);
                 }
                 OnFwd(OUT_C, 50);
                 OnRev(OUT_A, 20);
            }
            Off(OUT_AC);
        }
    }
}

task lineGapSx() {

     while(currentDir(sensorCompass()) != UP) {
          OnFwd(OUT_A, 40);
          OnRev(OUT_C, 40);
     }
     Off(OUT_AC);

     OnFwd(OUT_AC, 40);
     Wait(1200);
     Off(OUT_AC);

     RotateMotor(OUT_A, 50, 250);
     Off(OUT_A);

     while (1) {
         OnFwd(OUT_AC, 40);
         lightS1 = Sensor(S_LGH1);
         lightS2 = Sensor(S_LGH2);
         if (lightS1 < greyS1)
           break;
         if (lightS2 < greyS2)
           break;


     }

     Off(OUT_AC);
     ExitTo(lineFollowerSx);

}


//############################################################################//


void initLineFollower() {
    unsigned long end_time;
    
    int minS1 = 99;
    int minS2 = 99;

    Wait(1500);

    if(dx == 0) {
          end_time = CurrentTick() + 750;
          OnFwd(OUT_A, 40);
          OnRev(OUT_C, 40);
    }
    else {
          end_time = CurrentTick() + 750;
          OnFwd(OUT_C, 40);
          OnRev(OUT_A, 40);
    }

    while(CurrentTick() < end_time) {
        lightS1 = Sensor(S_LGH1);
        lightS2 = Sensor(S_LGH2);

        if(lightS1 > maxS1)       maxS1 = lightS1;
        else if (lightS1 < minS1) minS1 = lightS1;

        if(lightS2 > maxS2)       maxS2 = lightS2;
        else if (lightS2 < minS2) minS2 = lightS2;
    }

    if(dx == 0) {
          end_time = CurrentTick() + 1450;
          OnFwd(OUT_C, 40);
          OnRev(OUT_A, 40);
    }
    else {
          end_time = CurrentTick() + 1450;
          OnFwd(OUT_A, 40);
          OnRev(OUT_C, 40);
    }

    while(CurrentTick() < end_time) {
        lightS1 = Sensor(S_LGH1);
        lightS2 = Sensor(S_LGH2);

        if(lightS1 > maxS1)       maxS1 = lightS1;
        else if (lightS1 < minS1) minS1 = lightS1;

        if(lightS2 > maxS2)       maxS2 = lightS2;
        else if (lightS2 < minS2) minS2 = lightS2;
    }

    greyS1 = (minS1+maxS1)/2;
    greyS2 = (minS1+maxS1)/2;

    if(dx == 0) {
          OnFwd(OUT_A, 40);
          OnRev(OUT_C, 40);
    }
    else {
          OnFwd(OUT_C, 40);
          OnRev(OUT_A, 40);
    }
    
    if(dx) while (Sensor(S_LGH2) > greyS2) {}
    else   while (Sensor(S_LGH1) > greyS1) {}
    Off(OUT_AC);

    if(dx) RotateMotor(OUT_A, 40, 100);
    else   RotateMotor(OUT_C, 40, 100);

    if(dx) ExitTo(lineFollowerDx);
    else   ExitTo(lineFollowerSx);

}


//############################################################################//


task main ()
{
    SetSensorLowspeed(S_COMP);
    SetSensorLight(S_LGH1);
    SetSensorLight(S_LGH2);

    TextOut(0, LCD_LINE3, "Impostazione LF:");

    while(1) {
         if(ButtonPressed(BTNRIGHT, false)) {
              dx = 0;
              ClearLine(LCD_LINE6);
              TextOut(66, LCD_LINE6, " >");
         }
         else if(ButtonPressed(BTNLEFT, false)) {
              dx = 1;
              ClearLine(LCD_LINE6);
              TextOut(16, LCD_LINE6, "<");
         }
         else if(ButtonPressed(BTNCENTER, false)) {
              if(dx != -1) initLineFollower();
         }
    }
}
